---
import { supabase } from "../../../lib/supabase";

let { data: reservation, error } = await supabase
  .from("reservation")
  .select("*");

let reservationArr = reservation?.reverse();

const today = new Date();
const todayStart = new Date(today.setHours(0, 0, 0, 0)).getTime(); // Inicio del día en milisegundos

// Filtrar las reservas según la fecha y asignar restaurantId
reservationArr = await Promise.all(
  reservationArr?.map(async (res) => {
    if (!res.restaurant) return null;

    if (res.allergy == ""){
      res.allergy = "No hay alergias"
    }

    let restaurantId;
    if (res.restaurant === "DAY") {
      restaurantId = "1";
    } else if (res.restaurant === "FUSION") {
      restaurantId = "2";
    } else if (res.restaurant === "DE LA FONT") {
      restaurantId = "3";
    }

    if (restaurantId) {
      const reservationDate = res.date ? new Date(res.date).getTime() : null;
      if (!reservationDate || reservationDate < todayStart) {
        // Eliminar la reserva si la fecha ya ha pasado
        await supabase.from("reservation").delete().eq("id", res.id);
        return null;
      } else {
        return { ...res, restaurantId }; // Añadimos restaurantId directamente
      }
    }

    return null;
  }) || []
);

// Eliminar los valores nulos (reservas eliminadas)
reservationArr = reservationArr.filter((res) => res !== null);

// Ordenar las reservas por fecha y luego por hora
reservationArr = reservationArr?.sort((a, b) => {
  const dateA = a.date ? new Date(a.date).getTime() : Infinity;
  const dateB = b.date ? new Date(b.date).getTime() : Infinity;

  if (dateA === dateB) {
    const hourA = a.hour ? parseInt(a.hour.replace(":", ""), 10) : Infinity;
    const hourB = b.hour ? parseInt(b.hour.replace(":", ""), 10) : Infinity;
    return hourA - hourB;
  }

  return dateA - dateB;
});

// Función para formatear la fecha como día/mes/año
function formatDate(dateString: string): string {
  const date = new Date(dateString);
  const day = String(date.getDate()).padStart(2, '0');
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const year = date.getFullYear();
  return `${day}-${month}-${year}`;
}
---

{reservationArr?.map((res) => (
  <h3 class="title" data-title={res.restaurantId}>the cube {res.restaurant}</h3>
  <div class="card" data-restaurant={res.restaurantId}>
    <h1 class="card__ultra-title">Reserva</h1>
    <p class="card__title"> Nombre: <span class="card__title--data">{res.name}</span></p>
    <p class="card__title"> Email: <span class="card__title--data">{res.email}</span></p>
    <p class="card__title"> Número de Teléfono: <span class="card__title--data">{res.phone}</span></p>
    <p class="card__title">Hora: <span class="card__title--data">{res.hour}</span></p>
    <p class="card__title">Fecha: <span class="card__title--data">{formatDate(res.date)}</span></p>
    <p class="card__title">Personas: <span class="card__title--data">{res.people}</span></p>
    <p class="card__title">Alergias: <span class="card__title--data">{res.allergy}</span></p>
  </div>
))}

<style lang="scss">
    .title{
        font-size: 11px;
        text-transform: lowercase;
        text-align: center;
        line-height: 11px;
    }

    .card{
        padding: 10px;
        width: 100%;
        height: fit-content;
        display: flex;
        flex-direction: column;
        justify-content: space-around;

        &__ultra-title{
            width: 80%;
            padding-bottom: 10px;
            line-height: 30px;
            font-size: 30px;
            margin-bottom: 20px;
            font-family: 'Staatliches', sans-serif;
            font-weight: 600;
            font-size: 32px;
        }

        &__title{
            font-weight: 900;
            font-size: 20px;
            width: 90%;
            // display: flex;

            &--data{
        //       width: max-content; // Alternativa más robusta que fit-content
        // min-width: 50px; // Evita que se colapse
        // display: inline-block; // Asegura que respete el ancho
        // padding: 2px 5px; // Añade un poco de espacio interno
        overflow-wrap: break-word; // Si hay texto largo, rompe la línea
            }
        }
    }

    .card[data-restaurant="1"]{
        background-color: #FEEDDE;
        border: 8px solid #592D00;
        border-radius: 36px;

        .card__ultra-title{
            color: #FF9500;
            border-bottom: 1px solid #000;
            padding-bottom: 10px;
        }

        .card__title{
            color: #603B2A;

            &--data{
                color: #FF6200;
            }
        }
    }

    .title[data-title="1"]{
        color: #6A4108;
    }

    .title[data-title="2"]{
        color: #AF0000;
    }

    .card[data-restaurant="2"]{
        // background-color: #F8DEC8 ;

        // .card__ultra-title{
        //     color: #AF0000;

        //     &__mini{
        //         color: #000;

        //         &--color{
        //             color: #AF0000;
        //         }
        //     }
        // }

        // .card__title{
        //     color: #AF0000;

        //     &--data{
        //         color: #000;
        //     }
        // }
        background-color: #FEEDDE;
        border: 8px solid #AF0000;


        .card__ultra-title{
            color: #530505;
            border-bottom: 1px solid #000;
            padding-bottom: 10px;
        }

        .card__title{
            color: #AF0000;

            &--data{
                color: #000;
            }
        }
    }

    .title[data-title="3"]{
        color: #FF8100;
    }

    .card[data-restaurant="3"]{
        background-color: #131212;
        border: 8px solid #FF8100;
        border-radius: 36px;

        .card__ultra-title{
            color: #FFA872;
            border-bottom: 1px solid #fff;
        }

        .card__title{
            color: #FF8100;

            &--data{
                color: #fff;
            }
        }
    }
</style>
